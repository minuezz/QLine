@page "/reserve/{ServicePointId:guid}/{ServiceId:guid}"
@using Microsoft.AspNetCore.Components.Forms
@using MediatR
@using QLine.Application.Features.Reservations.Commands
@using QLine.Application.DTO
@inject IMediator Mediator

<h3>Create Reservation</h3>

@if (_created is null)
{
	<EditForm Model="this" OnValidSubmit="CreateAsync">
		<DataAnnotationsValidator />
		<div>
			<label>Start time (local): </label>
			<input type="datetime-local" @bind="_startLocal"/>
		</div>
		<div style="margin-top:8px;">
			<button type="submit">Create</button>
		</div>
		@if (!string.IsNullOrWhiteSpace(_errorMessage))
		{
			<ErrorAlert Message="@_errorMessage" Details="@_errorDetails" />
		}
	</EditForm>
}
else
{
	<h4>Reservation created</h4>
	<p><strong>Id:</strong>@_created.Id</p>
	<p><strong>Ticket:</strong>@_created.TicketNo</p>
	<p><strong>Start (local):</strong><UtcDate Value="@_created.StartTime" /></p>
	<p><small>UTC: @_created.StartTime.ToString("u")</small></p>
}

@code {
	[Parameter] public Guid ServicePointId { get; set; }
	[Parameter] public Guid ServiceId { get; set; }

	//Seeded Id from DbInititalizer
	private static readonly Guid TenantId = Guid.Parse("11111111-1111-1111-1111-111111111111");
	private static readonly Guid UserId = Guid.Parse("44444444-4444-4444-4444-444444444444");

	private DateTime _startLocal = DateTime.Now.AddHours(1);
	private ReservationDto? _created;
	private string? _errorMessage;
	private List<string>? _errorDetails;

	private async Task CreateAsync()
	{
		try
		{
			_errorMessage = null;
			_errorDetails = null;
			var dto = await Mediator.Send(new CreateReservationCommand(
				TenantId: TenantId,
				ServicePointId: ServicePointId,
				ServiceId: ServiceId,
				UserId: UserId,
				StartTime: new DateTimeOffset(_startLocal.ToUniversalTime())
			));
			_created = dto;
		}
		catch (Exception ex)
		{
			(_errorMessage, _errorDetails) = ex.ToUserMessage();
		}
	}
}
