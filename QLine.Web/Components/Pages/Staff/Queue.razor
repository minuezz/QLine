@page "/staff/queue"
@attribute [Authorize(Policy = "StaffOnly")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using MediatR
@using QLine.Application.DTO
@using QLine.Application.Features.Queue.Queries
@using QLine.Application.Features.Queue.Commands
@inject IMediator Mediator
@inject IJSRuntime JS
@inject QLine.Application.Abstractions.ICurrentUser Current

<h3>Staff Queue</h3>

<div style="margin:6px 0 12px 0;">
	<label>ServicePoint Id:</label>
	<input @bind="ServicePointIdString" style="width:360px" />
	<button @onclick="RefreshAsync" style="margin-left:8px;">Refresh</button>
	<button @onclick="CallNextAsync" style="margin-left: 8px;">Call Next</button>
</div>

@if (!Guid.TryParse(ServicePointIdString, out var _))
{
	<p class="text-danger">Enter valud ServicePointId (Guid).</p>
}
else if (_snapshot is null)
{
	<p>Loading...</p>
}
else
{
	<h4>In Service</h4>
	@if (_snapshot.Current is null)
	{
		<p>(none)</p>
	}
	else
	{
		<div class="card">
			<div><strong>@_snapshot.Current.TicketNo</strong></div>
			<div><strong>Status: </strong>@_snapshot.Current.Status</div>
			<div><strong>Priority: </strong>@_snapshot.Current.Priority</div>
			<div>
				<button @onclick="() => MarkDoneAsync(_snapshot.Current!.Id)">Done</button>
				<button @onclick="() => MarkNoShowAsync(_snapshot.Current!.Id)" style="margin-left: 6px;">No-show</button>
			</div>
		</div>
	}

	<h4 style="margin:16px;">Waiting</h4>
	@if (_snapshot.Waiting.Count == 0)
	{
		<p>(empty)</p>
	}
	else
	{
		<ul>
			@foreach (var w in _snapshot.Waiting)
			{
				<li>
					<strong>@w.TicketNo</strong> - created @w.CreatedAt.ToString("u") (prio @w.Priority)
					<button @onclick="() => SkipAsync(w.Id)">Skip</button>
				</li>
			}
		</ul>
	}
}

@code {
	private string ServicePointIdString = "22222222-2222-2222-2222-222222222222";
	
	private readonly SemaphoreSlim _refreshGate = new(1, 1);
	private bool _refreshPending;

	private IJSObjectReference? _realtimeHandle;
	private QueueSnapshotDto? _snapshot;

	protected override async Task OnInitializedAsync() => await RefreshAsync();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && Guid.TryParse(ServicePointIdString, out var sp))
		{
			var tenant = Current.TenantId ?? Guid.Parse("11111111-1111-1111-1111-111111111111");
			_realtimeHandle = await JS.InvokeAsync<IJSObjectReference>(
				"qlineRealtime.connect", sp, tenant, DotNetObjectReference.Create(this));
		}
	}

	private async Task RefreshAsync()
	{
		if (!Guid.TryParse(ServicePointIdString, out var sp)) return;

		if (!await _refreshGate.WaitAsync(0))
		{
			_refreshPending = true;
			return;
		}

		try
		{
			do 
			{
				_refreshPending = false;
				_snapshot = await Mediator.Send(new GetQueueQuery(sp));
				StateHasChanged();
			} while (_refreshPending);
		}
		finally
		{
			_refreshGate.Release();
		}
	}

	[JSInvokable]
	public async Task OnQueueUpdated() => await RefreshAsync();

	public async ValueTask DisposeAsync()
	{
		if (_realtimeHandle is not null)
			await _realtimeHandle.InvokeVoidAsync("dispose");
	}

	private async Task CallNextAsync()
	{
		if (!Guid.TryParse(ServicePointIdString, out var sp)) return;
		await Mediator.Send(new CallNextCommand(sp));
	}

	private async Task MarkNoShowAsync(Guid id)
	{
		await Mediator.Send(new MarkNoShowCommand(id));
	}

	private async Task MarkDoneAsync(Guid id)
	{
		await Mediator.Send(new MarkDoneCommand(id));
	}

	private async Task SkipAsync(Guid id)
	{
		await Mediator.Send(new SkipQueueEntryCommand(id));
	}
}
