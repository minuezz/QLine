@page "/services/{ServicePointId:guid}"
@using MediatR
@using QLine.Application.Features.Admin.Queries
@using QLine.Application.DTO
@inject IMediator Mediator
@inject NavigationManager Nav

<h3>Services</h3>

@if (_loading)
{
	<p>Loading...</p>
}
else if (_errorMessage is not null)
{
	<ErrorAlert Message="@_errorMessage" Details="_errorDetails" />
}
else if (_services.Count == 0)
{
	<p>No services for this service point.</p>
}
else
{
	<ul>
		@foreach (var s in _services)
		{
			<li>
				<strong>@s.Name</strong>
				<div>Duration: @s.DurationMin min, Buffer: @s.BufferMin min</div>
				<button @onclick="() => GoToReserve(ServicePointId, s.Id)">Reserve</button>
			</li>
		}
	</ul>
}

@code {
	[Parameter] public Guid ServicePointId { get; set; }

	private bool _loading = true;
	private string? _errorMessage;
	private List<string>? _errorDetails;
	private List<ServiceDto> _services = new();

	protected override async Task OnParametersSetAsync()
	{
		_loading = true;
		_errorMessage = null;
		_errorDetails = null;
		_services.Clear();

		try
		{
			_services = (await Mediator.Send(new GetServicesForServicePointQuery(ServicePointId))).ToList();
		}
		catch (Exception ex) 
		{
			(_errorMessage, _errorDetails) = ex.ToUserMessage();
		}
		finally { _loading = false; }
	}

	private void GoToReserve(Guid servicePointId, Guid serviceId)
		=> Nav.NavigateTo($"/reserve/{servicePointId}/{serviceId}");
}
